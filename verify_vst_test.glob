DIGEST 0d92e81456806d9e8a4cb4cbb6688cc0
Fverify_vst_test
R15:33 VST.floyd.proofauto <> <> lib
R52:59 vst_test <> <> lib
inst 95:103 <> CompSpecs
R107:115 VST.veric.compspecs <> compspecs class
R133:136 vst_test <> prog def
def 160:164 <> Vprog
R168:175 VST.veric.mpred <> varspecs def
R190:193 vst_test <> prog def
def 268:273 <> is_max
R279:282 Coq.Init.Datatypes <> list ind
R284:284 Coq.Numbers.BinNums <> Z ind
binder 276:276 <> l:1
R291:291 Coq.Numbers.BinNums <> Z ind
binder 288:288 <> m:2
R313:316 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R307:308 Coq.Lists.List <> In def
R312:312 verify_vst_test <> l:1 var
R310:310 verify_vst_test <> m:2 var
binder 324:324 <> x:3
R333:336 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R327:328 Coq.Lists.List <> In def
R332:332 verify_vst_test <> l:1 var
R330:330 verify_vst_test <> x:3 var
R338:341 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R337:337 verify_vst_test <> x:3 var
R342:342 verify_vst_test <> m:2 var
def 406:418 <> find_max_spec
R427:429 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R422:426 compcert.common.AST <> ident def
R430:436 VST.veric.mpred <> funspec ind
R444:451 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R461:464 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R452:460 vst_test <> _find_max def
R465:469 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R471:472 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R476:477 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R480:481 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R487:488 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R497:498 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R505:506 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R511:512 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R514:523 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R533:534 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R539:546 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R774:784 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R789:796 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R524:527 compcert.export.Ctypesdefs <> tptr def
R529:532 compcert.export.Ctypesdefs <> tint def
R535:538 compcert.export.Ctypesdefs <> tint def
R785:788 compcert.export.Ctypesdefs <> tint def
R473:475 compcert.common.Values <> val ind
R482:486 VST.msl.shares <> share def
R499:502 Coq.Init.Datatypes <> list ind
R504:504 Coq.Numbers.BinNums <> Z ind
R513:513 Coq.Numbers.BinNums <> Z ind
binder 470:470 <> a:4
binder 478:479 <> sh:5
binder 489:496 <> contents:6
binder 507:510 <> size:7
R547:552 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R570:582 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R603:615 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R639:645 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R553:566 VST.veric.shares <> readable_share def
R568:569 verify_vst_test <> sh:5 var
R584:586 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R587:593 Coq.ZArith.Zcomplements <> Zlength def
R595:602 verify_vst_test <> contents:6 var
R620:622 Coq.Init.Logic <> ::type_scope:x_'='_x not
R616:619 verify_vst_test <> size:7 var
R623:629 Coq.ZArith.Zcomplements <> Zlength def
R631:638 verify_vst_test <> contents:6 var
R646:653 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R655:656 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R677:683 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R654:654 verify_vst_test <> a:4 var
R657:660 compcert.common.Values <> Vint constr
R663:670 compcert.lib.Integers Int repr def
R672:675 verify_vst_test <> size:7 var
R684:688 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R773:773 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R689:695 VST.floyd.field_at <> data_at def
R697:698 verify_vst_test <> sh:5 var
R701:706 compcert.export.Ctypesdefs <> tarray def
R708:711 compcert.export.Ctypesdefs <> tint def
R713:716 verify_vst_test <> size:7 var
R738:740 Coq.Lists.List <> map def
R748:750 Coq.Lists.List <> map def
R761:768 verify_vst_test <> contents:6 var
R752:759 compcert.lib.Integers Int repr def
R742:745 compcert.common.Values <> Vint constr
R772:772 verify_vst_test <> a:4 var
binder 470:470 <> a:8
binder 478:479 <> sh:9
binder 489:496 <> contents:10
binder 507:510 <> size:11
R797:799 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R806:812 VST.floyd.canon <> ::assert:'EX'_x_'..'_x_','_x not
R805:805 Coq.Numbers.BinNums <> Z ind
binder 800:802 <> max:12
R813:818 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R838:844 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R819:824 verify_vst_test <> is_max def
R826:833 verify_vst_test <> contents:10 var
R835:837 verify_vst_test <> max:12 var
R845:852 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R872:878 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R853:856 compcert.common.Values <> Vint constr
R859:866 compcert.lib.Integers Int repr def
R868:870 verify_vst_test <> max:12 var
R879:883 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R968:968 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R884:890 VST.floyd.field_at <> data_at def
R892:893 verify_vst_test <> sh:9 var
R896:901 compcert.export.Ctypesdefs <> tarray def
R903:906 compcert.export.Ctypesdefs <> tint def
R908:911 verify_vst_test <> size:11 var
R933:935 Coq.Lists.List <> map def
R943:945 Coq.Lists.List <> map def
R956:963 verify_vst_test <> contents:10 var
R947:954 compcert.lib.Integers Int repr def
R937:940 compcert.common.Values <> Vint constr
R967:967 verify_vst_test <> a:8 var
def 1012:1016 <> Gprog
R1020:1027 VST.veric.mpred <> funspecs def
R1032:1033 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R1047:1048 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R1034:1046 verify_vst_test <> find_max_spec def
prf 1236:1251 <> is_max_singleton
binder 1261:1261 <> x:13
R1264:1269 verify_vst_test <> is_max def
R1271:1271 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R1273:1273 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R1272:1272 verify_vst_test <> x:13 var
R1275:1275 verify_vst_test <> x:13 var
R1306:1311 verify_vst_test <> is_max def
R1427:1435 Coq.ZArith.BinInt Z le_refl thm
R1427:1435 Coq.ZArith.BinInt Z le_refl thm
prf 1475:1488 <> is_max_cons_gt
binder 1498:1498 <> l:14
binder 1500:1500 <> x:15
binder 1502:1502 <> m:16
R1518:1521 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1508:1513 verify_vst_test <> is_max def
R1515:1515 verify_vst_test <> l:14 var
R1517:1517 verify_vst_test <> m:16 var
R1522:1522 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1549:1553 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 1530:1530 <> y:17
R1539:1542 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1533:1534 Coq.Lists.List <> In def
R1538:1538 verify_vst_test <> l:14 var
R1536:1536 verify_vst_test <> y:17 var
R1544:1547 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1543:1543 verify_vst_test <> y:17 var
R1548:1548 verify_vst_test <> x:15 var
R1554:1559 verify_vst_test <> is_max def
R1563:1566 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R1562:1562 verify_vst_test <> x:15 var
R1567:1567 verify_vst_test <> l:14 var
R1570:1570 verify_vst_test <> x:15 var
R1622:1627 verify_vst_test <> is_max def
R1743:1751 Coq.ZArith.BinInt Z le_refl thm
R1743:1751 Coq.ZArith.BinInt Z le_refl thm
prf 1802:1815 <> is_max_cons_le
binder 1825:1825 <> l:18
binder 1827:1827 <> x:19
binder 1829:1829 <> m:20
R1845:1848 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1835:1840 verify_vst_test <> is_max def
R1842:1842 verify_vst_test <> l:18 var
R1844:1844 verify_vst_test <> m:20 var
R1855:1858 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1850:1853 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1849:1849 verify_vst_test <> x:19 var
R1854:1854 verify_vst_test <> m:20 var
R1859:1864 verify_vst_test <> is_max def
R1868:1871 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R1867:1867 verify_vst_test <> x:19 var
R1872:1872 verify_vst_test <> l:18 var
R1875:1875 verify_vst_test <> m:20 var
R1919:1924 verify_vst_test <> is_max def
def 2255:2271 <> find_max_loop_inv
R2277:2279 compcert.common.Values <> val ind
binder 2274:2274 <> a:21
R2287:2291 VST.msl.shares <> share def
binder 2283:2284 <> sh:22
R2335:2338 Coq.Init.Datatypes <> list ind
R2340:2340 Coq.Numbers.BinNums <> Z ind
binder 2325:2332 <> contents:23
R2350:2350 Coq.Numbers.BinNums <> Z ind
binder 2344:2347 <> size:24
R2359:2361 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R2366:2367 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R2365:2365 Coq.Numbers.BinNums <> Z ind
binder 2362:2362 <> i:25
R2368:2370 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R2384:2388 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R2383:2383 Coq.Numbers.BinNums <> Z ind
binder 2371:2380 <> max_so_far:26
R2389:2394 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R2409:2419 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R2460:2464 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R2396:2399 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R2401:2404 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R2400:2400 verify_vst_test <> i:25 var
R2400:2400 verify_vst_test <> i:25 var
R2405:2408 verify_vst_test <> size:24 var
R2420:2425 verify_vst_test <> is_max def
R2428:2434 VST.zlist.sublist <> sublist def
R2440:2447 verify_vst_test <> contents:23 var
R2438:2438 verify_vst_test <> i:25 var
R2450:2459 verify_vst_test <> max_so_far:26 var
R2465:2471 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R2510:2521 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R2534:2545 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R2579:2583 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R2472:2475 VST.floyd.canon <> temp constr
R2477:2480 vst_test <> _max def
R2483:2486 compcert.common.Values <> Vint constr
R2489:2496 compcert.lib.Integers Int repr def
R2498:2507 verify_vst_test <> max_so_far:26 var
R2522:2525 VST.floyd.canon <> temp constr
R2527:2531 vst_test <> _nums def
R2533:2533 verify_vst_test <> a:21 var
R2546:2549 VST.floyd.canon <> temp constr
R2551:2555 vst_test <> _size def
R2558:2561 compcert.common.Values <> Vint constr
R2564:2571 compcert.lib.Integers Int repr def
R2573:2576 verify_vst_test <> size:24 var
R2584:2588 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2671:2671 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R2589:2595 VST.floyd.field_at <> data_at def
R2597:2598 verify_vst_test <> sh:22 var
R2601:2606 compcert.export.Ctypesdefs <> tarray def
R2608:2611 compcert.export.Ctypesdefs <> tint def
R2613:2616 verify_vst_test <> size:24 var
R2636:2638 Coq.Lists.List <> map def
R2646:2648 Coq.Lists.List <> map def
R2659:2666 verify_vst_test <> contents:23 var
R2650:2657 compcert.lib.Integers Int repr def
R2640:2643 compcert.common.Values <> Vint constr
R2670:2670 verify_vst_test <> a:21 var
prf 2823:2835 <> body_find_max
R2838:2847 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R2872:2884 verify_vst_test <> find_max_spec def
R2861:2870 vst_test <> f_find_max def
R2855:2859 verify_vst_test <> Gprog def
R2849:2853 verify_vst_test <> Vprog def
R2983:2999 verify_vst_test <> find_max_loop_inv def
R2983:2999 verify_vst_test <> find_max_loop_inv def
R3098:3101 VST.zlist.sublist <> Znth def
